@page "/visualization/{SignalId:int}"
@using System.Net.Http.Json
@inject HttpClient Http

<h3>EKG Signal Visualization</h3>

@if (loading)
{
    <p>Loading...</p>
}
else if (signal == null)
{
    <p>Signal not found</p>
}
else
{
    <div class="card">
        <div class="card-header">
            <h5>Signal Details</h5>
        </div>
        <div class="card-body">
            <p>Patient ID: @signal.PatientId</p>
            <p>Recorded: @signal.RecordedAt.ToString("g")</p>
            <p>Sampling Rate: @signal.SamplingRate Hz</p>
        </div>
    </div>

    <div class="mt-4">
        <h5>Signal Visualization</h5>
        <div class="ekg-container" style="height: 300px; width: 100%;">
            <canvas id="ekgCanvas" width="100%" height="300"></canvas>
        </div>
    </div>

    <div class="mt-4">
        <button class="btn btn-primary" @onclick="AnalyzeSignal">Analyze Signal</button>
    </div>

    @if (analysisResult != null)
    {
        <div class="mt-4 card">
            <div class="card-header">
                <h5>Analysis Results</h5>
            </div>
            <div class="card-body">
                <p>Heart Rate: @analysisResult.HeartRate.ToString("F1") BPM</p>
                <p>Arrhythmia Detected: @(analysisResult.HasArrhythmia ? "Yes" : "No")</p>
                <p>Analyzed At: @analysisResult.AnalyzedAt.ToString("g")</p>
            </div>
        </div>
    }
}

@code {
    [Parameter]
    public int SignalId { get; set; }

    private EkgSignal? signal;
    private AnalysisResult? analysisResult;
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadSignalData();
    }

    private async Task LoadSignalData()
    {
        try
        {
            signal = await Http.GetFromJsonAsync<EkgSignal>($"api/EkgSignals/{SignalId}");
            loading = false;
            await Task.Delay(100); // Wait for UI render
            await RenderEkgChart();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading signal: {ex.Message}");
            loading = false;
        }
    }

    private async Task AnalyzeSignal()
    {
        try
        {
            analysisResult = await Http.PostAsJsonAsync<AnalysisResult>($"api/EkgSignals/{SignalId}/analyze", null);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error analyzing signal: {ex.Message}");
        }
    }

    private async Task RenderEkgChart()
    {
        await JSRuntime.InvokeVoidAsync("drawEkgChart", "ekgCanvas", signal.DataPoints);
    }
}